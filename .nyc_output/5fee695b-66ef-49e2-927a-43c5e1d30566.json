{"/home/usuario/modificacion-P7-DSI/src/bubblesort.ts":{"path":"/home/usuario/modificacion-P7-DSI/src/bubblesort.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":15,"column":21},"end":{"line":15,"column":32}},"3":{"start":{"line":16,"column":8},"end":{"line":25,"column":9}},"4":{"start":{"line":16,"column":21},"end":{"line":16,"column":22}},"5":{"start":{"line":17,"column":12},"end":{"line":24,"column":13}},"6":{"start":{"line":17,"column":25},"end":{"line":17,"column":26}},"7":{"start":{"line":18,"column":16},"end":{"line":22,"column":17}},"8":{"start":{"line":19,"column":31},"end":{"line":19,"column":38}},"9":{"start":{"line":20,"column":20},"end":{"line":20,"column":42}},"10":{"start":{"line":21,"column":20},"end":{"line":21,"column":39}},"11":{"start":{"line":23,"column":16},"end":{"line":23,"column":34}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":20}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":18},"end":{"line":8,"column":21}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":18},"end":{"line":27,"column":5}},"line":14}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":16},"end":{"line":22,"column":17}},"type":"if","locations":[{"start":{"line":18,"column":16},"end":{"line":22,"column":17}},{"start":{"line":18,"column":16},"end":{"line":22,"column":17}}],"line":18}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":7,"6":7,"7":21,"8":7,"9":7,"10":7,"11":21,"12":1,"13":1},"f":{"0":1,"1":1},"b":{"0":[7,14]},"inputSourceMap":{"version":3,"file":"/home/usuario/modificacion-P7-DSI/src/bubblesort.ts","sources":["/home/usuario/modificacion-P7-DSI/src/bubblesort.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACH,MAAa,UAAU;IACrB,gBAAe,CAAC;IAEhB;;;;OAIG;IACH,OAAO,CAAC,IAAc;QACpB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/B,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAC;gBACrC,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,OAAO;oBAClC,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oBACnB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;iBACpB;gBACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;aACnB;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAtBD,gCAsBC","sourcesContent":["import {Strategy} from \"./strategy\";\n\n/**\n * Class that implements the bubble sort algorithm\n */\nexport class bubbleSort implements Strategy {\n  constructor() {}\n\n  /**\n   * Main method to order\n   * @param data Unsorted array\n   * @returns The ordered array\n   */\n  execute(data: number[]): number[] {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      for(let j = 0; j < length - i - 1; j++){\n        if (data[j] > data[j + 1]) { // swap\n          let temp = data[j];\n          data[j] = data[j+1];\n          data[j + 1] = temp;\n        }\n        console.log(data);\n      }\n    }\n    return data;\n  }\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"babb9cfc40a15237e4b36d0e8e0e44b5f1029f94","contentHash":"6665096758b91af8311d5d2bb258c693cc5d9cf6d7d3d05866bf75426dd71351"},"/home/usuario/modificacion-P7-DSI/src/mergesort.ts":{"path":"/home/usuario/modificacion-P7-DSI/src/mergesort.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":16,"column":26},"end":{"line":16,"column":28}},"3":{"start":{"line":17,"column":24},"end":{"line":17,"column":25}},"4":{"start":{"line":18,"column":25},"end":{"line":18,"column":26}},"5":{"start":{"line":20,"column":8},"end":{"line":29,"column":9}},"6":{"start":{"line":21,"column":12},"end":{"line":28,"column":13}},"7":{"start":{"line":22,"column":16},"end":{"line":22,"column":50}},"8":{"start":{"line":23,"column":16},"end":{"line":23,"column":28}},"9":{"start":{"line":26,"column":16},"end":{"line":26,"column":52}},"10":{"start":{"line":27,"column":16},"end":{"line":27,"column":29}},"11":{"start":{"line":32,"column":8},"end":{"line":32,"column":89}},"12":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"13":{"start":{"line":41,"column":12},"end":{"line":41,"column":24}},"14":{"start":{"line":44,"column":23},"end":{"line":44,"column":50}},"15":{"start":{"line":46,"column":21},"end":{"line":46,"column":42}},"16":{"start":{"line":47,"column":22},"end":{"line":47,"column":40}},"17":{"start":{"line":49,"column":8},"end":{"line":49,"column":67}},"18":{"start":{"line":52,"column":0},"end":{"line":52,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":18},"end":{"line":8,"column":21}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":23},"end":{"line":33,"column":5}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":18},"end":{"line":50,"column":5}},"line":39}},"branchMap":{"0":{"loc":{"start":{"line":20,"column":15},"end":{"line":20,"column":67}},"type":"binary-expr","locations":[{"start":{"line":20,"column":15},"end":{"line":20,"column":38}},{"start":{"line":20,"column":42},"end":{"line":20,"column":67}}],"line":20},"1":{"loc":{"start":{"line":21,"column":12},"end":{"line":28,"column":13}},"type":"if","locations":[{"start":{"line":21,"column":12},"end":{"line":28,"column":13}},{"start":{"line":21,"column":12},"end":{"line":28,"column":13}}],"line":21},"2":{"loc":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},{"start":{"line":40,"column":8},"end":{"line":42,"column":9}}],"line":40}},"s":{"0":1,"1":1,"2":6,"3":6,"4":6,"5":6,"6":11,"7":6,"8":6,"9":5,"10":5,"11":6,"12":13,"13":7,"14":6,"15":6,"16":6,"17":6,"18":1},"f":{"0":1,"1":6,"2":13},"b":{"0":[17,14],"1":[6,5],"2":[7,6]},"inputSourceMap":{"version":3,"file":"/home/usuario/modificacion-P7-DSI/src/mergesort.ts","sources":["/home/usuario/modificacion-P7-DSI/src/mergesort.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACH,MAAa,SAAS;IACpB,gBAAe,CAAC;IAEhB;;;;;OAKG;IACH,KAAK,CAAC,IAAc,EAAE,KAAe;QACnC,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,UAAU,GAAG,CAAC,CAAC;QAEnB,2DAA2D;QAC3D,OAAO,SAAS,GAAG,IAAI,CAAC,MAAM,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,EAAE;YAC3D,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE;gBACvC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBAClC,SAAS,EAAE,CAAC,CAAC,yBAAyB;aACvC;iBAAM;gBACL,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;gBACpC,UAAU,EAAE,CAAC,CAAC,0BAA0B;aACzC;SACF;QACD,qEAAqE;QACrE,gCAAgC;QAChC,OAAO,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;IACnF,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,IAAc;QACpB,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;QACD,yEAAyE;QACzE,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAE3C,kEAAkE;QAClE,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;QACnC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEjC,gDAAgD;QAChD,OAAO,IAAI,CAAC,KAAK,CACf,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7C,CAAC;CACF;AAjDD,8BAiDC","sourcesContent":["import {Strategy} from \"./strategy\";\n\n/**\n * Class that implements the merge sort algorithm\n */\nexport class mergeSort implements Strategy {\n  constructor() {}\n\n  /**\n   * Auxiliar method to sort\n   * @param left left side of the array\n   * @param right right side of the array\n   * @returns the ordered array\n   */\n  merge(left: number[], right: number[]): number[] {\n    let resultArray = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n\n    // We will concatenate values into the resultArray in order\n    while (leftIndex < left.length && rightIndex < right.length) {\n      if (left[leftIndex] < right[rightIndex]) {\n        resultArray.push(left[leftIndex]);\n        leftIndex++; // move left array cursor\n      } else {\n        resultArray.push(right[rightIndex]);\n        rightIndex++; // move right array cursor\n      }\n    }\n    // We need to concat here because there will be one element remaining\n    // from either left OR the right\n    return resultArray.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n  }\n\n  /**\n   * Main method of sorting\n   * @param data Unsorted array\n   * @returns ordered array\n   */\n  execute(data: number[]): number[] {\n    if (data.length <= 1) {\n      return data;\n    }\n    // In order to divide the array in half, we need to figure out the middle\n    const middle = Math.floor(data.length / 2);\n\n    // This is where we will be dividing the array into left and right\n    const left = data.slice(0, middle);\n    const right = data.slice(middle);\n\n    // Using recursion to combine the left and right\n    return this.merge(\n      this.execute(left), this.execute(right));\n  }\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"473141591d77ceb33a5471aaf0419501035f357b","contentHash":"ac5637b0d7aa87272bc47f8424e60a3bf047322d34adec3b5ca96e9faf247fad"}}